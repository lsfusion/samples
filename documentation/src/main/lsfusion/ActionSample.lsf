MODULE ActionSample;

REQUIRE Utils, Authentication, Chat, Time, Geo;

CLASS Item;

//#default
showMessage  { MESSAGE 'Hello World!'; } 								// action declaration
loadImage 'Upload image'  ABSTRACT ( Item); 	
//#default end

//#action
CLASS Currency;
name = DATA STRING[30] (Currency);
code = DATA INTEGER (Currency);

CLASS Order;
currency = DATA Currency (Order);
customer = DATA STRING[100] (Order);
copy 'Copy' (Order old)  { 
    NEW new = Order {                                   // an action is created that consists of the sequential execution of two actions
        currency(new) <- currency(old);                 // a semicolon is put after each statement
        customer(new) <- customer(old);
    }                                                   // there is no semicolon in this line, because the operator ends in }
}
 
loadDefaultCurrency(ISTRING[30] name, INTEGER code)  { 
    NEW c = Currency {
        name(c) <- name;
        code(c) <- code;
    }
}
run ()  { 
    loadDefaultCurrency('USD', 866);
    loadDefaultCurrency('EUR', 1251);
}
//#action end

//#abstract
exportXls 'Export to Excel'  ABSTRACT CASE ( Order);         // In this case, ABSTRACT CASE OVERRIDE LAST is created
exportXls (Order o) + WHEN name(currency(o)) == 'USD' THEN { 
    MESSAGE 'Export USD not implemented';
} 

CLASS Task;
run 'Execute'  ABSTRACT ( Task);                           // ABSTRACT MULTI EXCLUSIVE

CLASS Task1 : Task;
name = DATA STRING[100] (Task);
run (Task1 t) + { 
    MESSAGE 'Run Task1 ' + name(t);
}


CLASS OrderDetail;
price = DATA NUMERIC[14,2] (OrderDetail);

CLASS InvoiceDetail;
price = DATA NUMERIC[14,2] (InvoiceDetail);
fill  ABSTRACT LIST ( OrderDetail, InvoiceDetail);   // ABSTRACT LIST LAST

fill (OrderDetail od, InvoiceDetail id) + { 
    price(id) <- price(od);
}
//#abstract end

//#activate
//Form with two tabs
FORM myForm 'My form'
    OBJECTS u = CustomUser
    PROPERTIES(u) name
     
    OBJECTS c = Chat
    PROPERTIES(c) name
;
 
DESIGN myForm {
    NEW tabbedPane FIRST {
        tabbed = TRUE;
        NEW contacts {
            caption = 'Contacts';
            MOVE BOX(u);
        }
        NEW recent {
            caption = 'Recent';
            MOVE BOX(c);
        }       
    }
}
  
testAction()  { 
    ACTIVATE FORM myForm;
    ACTIVATE TAB myForm.recent;
}

CLASS ReceiptDetail;
barcode = DATA STRING[30] (ReceiptDetail);
quantity = DATA STRING[30] (ReceiptDetail);

FORM POS
    OBJECTS d = ReceiptDetail
    PROPERTIES(d) barcode, quantityGrid = quantity
;

createReceiptDetail 'Add sales line'(STRING[30] barcode)  { 
    NEW d = ReceiptDetail {
        barcode(d) <- barcode;
        ACTIVATE PROPERTY POS.quantityGrid;
    }
}
//#activate end

//#activeform
FORM exampleForm;
testActive  { 
    ACTIVE FORM exampleForm;
    IF isActiveForm() THEN MESSAGE 'Example form is active';
}
//#activeform end

//#apply
CLASS Sku;
id = DATA INTEGER (Sku);

in = DATA LOCAL BOOLEAN (Sku);
applyIn()  { 
    in(Sku s) <- TRUE WHERE id(s) == 123; 
    APPLY NESTED (in[Sku]) {};
    IF canceled() THEN
        MESSAGE applyMessage();
    FOR in(Sku s) DO
        MESSAGE id(s); // shows '123'
}

calculateInTransaction()  { 
    APPLY {
        id(Sku s) <- (GROUP MAX id(Sku ss)) (+) 1; // putting down a new code inside the transaction 
    }
}
//#apply end

//#ask
testAsk ()  { 
    ASK 'Are you sure you want to continue?' DO {
        MESSAGE 'You continued';
    }
    
    ASK 'Use old values?' useOld = YESNO DO {
        IF useOld THEN 
            MESSAGE 'Using old values';
        ELSE
            MESSAGE 'Using new values';
    }
}
//#ask end

//#assign
// set a 15 percent discount for all customers who have an order amount over 100
CLASS Customer;
discount = DATA NUMERIC[5,2] (Customer);
totalOrders = DATA NUMERIC[14,2] (Customer);
setDiscount  { 
    discount(Customer c) <- 15 WHERE totalOrders(c) > 100;
}

discount = DATA NUMERIC[5,2] (Customer, Item);
in = DATA BOOLEAN (Item); 
// change the discount for selected products for a customer
setDiscount (Customer c)  { 
    discount(c, Item i) <- 15 WHERE in(i);
}
  
// copy property g to property f
f = DATA INTEGER (INTEGER);
g = DATA INTEGER (INTEGER);
copyFG  { 
    f(a) <- g(a);
}
//#assign end

//#break
testBreak ()  { 
    FOR iterate(INTEGER i, 1, 100) DO {
        IF i == 50 THEN BREAK; // will only come up to 50
    } 
}     
//#break end

//#cancel
dropChanges()  { 
    CANCEL NESTED (in[Sku]); // cancel all changes except the in property
}
//#cancel end

//#case
test = DATA INTEGER (INTEGER);
caseActionTest(a)  { 
    CASE
        WHEN test(a) > 7 THEN MESSAGE '>7';
        WHEN test(a) > 6 THEN MESSAGE '>6';
        WHEN test(a) > 5 THEN MESSAGE '>5';
}
//#case end

//#changeclass
CLASS Document;
date = DATA DATE (Document);

CLASS ClosedDocument : Document;
// sets status to closed for all documents with a date older than 2 weeks
changeStatus()  { 
    CHANGECLASS Document d TO ClosedDocument WHERE sum(date(d), 14) <= currentDate();
}
//#changeclass end

//#custom
showOnMap 'Show on map' INTERNAL 'lsfusion.server.logics.classes.data.utils.geo.ShowOnMapAction' (DOUBLE, DOUBLE, MapProvider, BPSTRING[100]);

serviceDBMT 'DB maintenance (multithreaded, threadCount, timeout)' INTERNAL 'lsfusion.server.physics.admin.service.action.ServiceDBMultiThreadAction' (INTEGER, INTEGER) NULL;

printlnAction 'Print text to the console'  INTERNAL  <{System.out.println("action test"); }>; 
setNoCancelInTransaction()  INTERNAL  <{ context.getSession().setNoCancelInTransaction(true); }>; // here context is a parameter of executeInternal method
//#custom end

//#delete
// deleting an object
deleteObject(obj)  { DELETE obj; }
  
// deleting all inactive products
CLASS Article;
active = DATA BOOLEAN (Article);
deleteInactiveArticles()  { 
    DELETE Article a WHERE a IS Article AND NOT active(a); // a local parameter a is added corresponding to the objects to be iterated over
}
//#delete end

//#dialog
FORM selectSku
    OBJECTS s = Sku
    PROPERTIES(s) id
;

testDialog  { 
    DIALOG selectSku OBJECTS s INPUT DO {
        MESSAGE 'Selected sku : ' + id(s);
    }
}

sku = DATA Sku (OrderDetail);
idSku (OrderDetail d) = id(sku(d));

changeSku (OrderDetail d)  { 
    DIALOG selectSku OBJECTS s = sku(d) CHANGE;
    
    //equivalent to the first option
    DIALOG selectSku OBJECTS s = sku(d) INPUT NULL CONSTRAINTFILTER DO {
        sku(d) <- s;
    }
}
//#dialog end

//#email
FORM remindUserPass
    OBJECTS u=CustomUser PANEL
    PROPERTIES(u) READONLY login, name[Contact]
;

emailUserPassUser 'Login reminder' (CustomUser user)  {
    LOCAL bodyFile = FILE (); 
    PRINT remindUserPass OBJECTS u = user HTML TO bodyFile;
    EMAIL
    SUBJECT 'Login reminder'
    TO email(user)
    BODY bodyFile();
}
  
justSendEmail 'Send letter' ()  { 
    stringToFile('<font color=#FF0000 size=+3>big red text</font>');
    EMAIL
    FROM 'luxsoft@adsl.by'
    SUBJECT 'Letter subject'
    TO 'xxx@tut.by'
    BODY resultFile();
}
//#email end

//#eval
addProperty  { EVAL ACTION 'MESSAGE \'Hello World\''; }  // source code consisting of one instruction is specified with a string constant
  
code 'Source code' = DATA BPSTRING[2000] ();              // a property to which the user can enter the source code
execute 'Execute code'  { EVAL code(); }      // the action executing this code
//#eval end

//#exec
importData(Sku sku, Order order)  { 
    MESSAGE 'Run import for ' + id(sku) + ' ' + customer(order);  
}                                    // declared above action importData with two parameters 

order = DATA Order (OrderDetail) NONULL DELETE;
runImport(OrderDetail d)  { importData(sku(d), order(d)); } // declaration of the action runImport that will call importData
//#exec end

//#exportplain
CLASS Store;

name = DATA STRING[20] (Sku);
weight = DATA NUMERIC[10,2] (Sku);

in = DATA BOOLEAN (Store, Sku);

exportSkus (Store store)  { 
    EXPORT DBF CHARSET 'CP866' FROM id(Sku s), name(s), weight(s) WHERE in(store, s); // uploading to DBF all Sku for which in (Store, Sku) is specified for the desired warehouse 
    EXPORT CSV NOHEADER NOESCAPE FROM id(Sku s), name(s), weight(s) WHERE in(store, s); // uploads to CSV without header line and escaping special characters
    EXPORT FROM id(Sku s), name(s), weight(s) WHERE in(store, s) ORDER name(s) DESC; // uploads JSON, sorting by property name[Sku] in descending order
    EXPORT FROM ff='HI'; // uploads JSON {"ff":"HI"}, as by default it gets the name value, and the platform gets the object {"value":"HI"} to 
    EXPORT FROM 'HI'; // uploads JSON "HI", as by default it gets the name value, and the platform automatically converts the object {"value": "HI"} to "HI"     
}
//#exportplain end

//#export
FORM exportSku
    OBJECTS st = Store

    OBJECTS s = Sku
    PROPERTIES(s) id, name, weight
    FILTERS in(st, s) 
;

exportSku (Store store)  { 
    // uploading to DBF all Sku for which in (Store, Sku) is specified for the desired warehouse 
    EXPORT exportSku OBJECTS st = store DBF CHARSET 'CP866'; 
    EXPORT exportSku XML;
    EXPORT exportSku OBJECTS st = store CSV ','; 
}
//#export end

name = DATA STRING[30] (Article);
barcode = DATA STRING[30] (Article);
price = DATA INTEGER (Article);

//#external
testExportFile = DATA FILE ();

externalHTTP()  { 
    EXTERNAL HTTP GET 'https://www.cs.cmu.edu/~chuck/lennapg/len_std.jpg' TO exportFile; 
    open(exportFile()); 

    EXTERNAL HTTP 'http://tryonline.lsfusion.org/exec?action=getExamples' PARAMS JSONFILE('\{"mode"=1,"locale"="en"\}') TO exportFile; // braces are escaped') TO exportFile; // braces are escaped as they are used in internationalization
    IMPORT FROM exportFile() FIELDS () TEXT caption, TEXT code DO
        MESSAGE 'Example : ' + caption + ', code : ' + code;
        
    EXTERNAL HTTP 'http://tryonline.lsfusion.org/exec?action=doSomething&someprm=$1' BODYURL 'otherprm=$2&andonemore=$3' PARAMS 1,2,'3'; // passes the second and third parameters to BODY url-encoded
}
externalSQL ()  { 
    EXPORT TABLE FROM bc=barcode(Article a) WHERE name(a) LIKE '%Meat%'; // getting all barcodes of products with the name meat
    EXTERNAL SQL 'jdbc:mysql://$1/test?user=root&password=' EXEC 'select price AS pc, articles.barcode AS brc from $2 x JOIN articles ON x.bc=articles.barcode' PARAMS 'localhost',exportFile() TO exportFile; // reading prices for read barcodes
    
    // writing prices for all products with received barcodes
    LOCAL price = INTEGER (INTEGER);
    LOCAL barcode = STRING[30] (INTEGER);
    IMPORT FROM exportFile() TO price=pc,barcode=brc;
    FOR barcode(Article a) = barcode(INTEGER i) DO 
        price(a) <- price(i);
}
externalLSF()  { 
    EXTERNAL LSF 'http://localhost:7651' EXEC 'System.testAction[]'; 
}; 

//#external end

//#for
name = DATA STRING[100] (Store);

testFor  { 
    LOCAL sum = INTEGER ();
    FOR iterate(i, 1, 100) DO {
        sum() <- sum() (+) i;
    }
    
    FOR in(Sku s) DO {
        MESSAGE 'Sku ' + id(s) + ' was selected';
    }
    
    FOR Store st IS Store DO { // iterating over all objects of the Store class
        FOR in(st, Sku s) DO { // iterating over all Sku for which in is set
            MESSAGE 'There is Sku ' + id(s) + ' in store ' + name(st); 
        }   
        
    }
}

newSku ()  { 
    NEW s = Sku {
        id(s) <- 425;
        name(s) <- 'New Sku';
    }
}

copy (Sku old)  { 
    NEW new = Sku {
        id(new) <- id(old);
        name(new) <- name(old);
    }
}

createDetails (Order o)  { 
    FOR in(Sku s) NEW d = OrderDetail DO {
        order(d) <- o;
        sku(d) <- s; 
    }
}

//#for end

//#ifthena
// Action that compares the value of the count property to 3 and displays a message to the user
moreThan3(obj)  { 
    IF count(obj) > 3 THEN 
        MESSAGE '>3';
    ELSE 
        MESSAGE '<=3';
}
 
checkNullName (Store st) { 
    IF NOT name(st) THEN
        MESSAGE 'Name is null';
}
//#ifthena end

quantity = DATA INTEGER (Store,Article);

//#import
import()  { 

    LOCAL xlsFile = EXCELFILE ();
    
    LOCAL field1 = BPSTRING[50] (INTEGER);
    LOCAL field2 = BPSTRING[50] (INTEGER);
    LOCAL field3 = BPSTRING[50] (INTEGER);
    LOCAL field4 = BPSTRING[50] (INTEGER);

    LOCAL headField1 = BPSTRING[50] ();
    LOCAL headField2 = BPSTRING[50] ();

    INPUT f = EXCELFILE DO {     
        IMPORT XLS SHEET 2 FROM f TO field1 = C, field2, field3 = F, field4 = A;
        IMPORT XLS SHEET ALL FROM f TO field1 = C, field2, field3 = F, field4 = A;
        
        FOR imported(INTEGER i) DO { // imported property - a system property for iterating data
            MESSAGE 'field1 value = ' + field1(i);
            MESSAGE 'field2 value = ' + field2(i);
            MESSAGE 'field3 value = ' + field3(i);
            MESSAGE 'field4 value = ' + field4(i);
       }
    }
    
    LOCAL t = FILE ();
    EXTERNAL SQL 'jdbc:postgresql://localhost/test?user=postgres&password=12345' EXEC 'SELECT x.a,x.b,x.c,x.d FROM orders x WHERE x.id = $1;' PARAMS '4553' TO t;
    IMPORT FROM t() FIELDS INTEGER a, DATE b, BPSTRING[50] c, BPSTRING[50] d DO        // import with FIELDS option
        NEW o = Order {
            number(o) <- a;
            date(o) <- b;
            customer(o) <- c;
            currency(o) <- GROUP MAX Currency currency IF name(currency) = d; // finding currency with this name
        }
    
    
    INPUT f = FILE DO  
        IMPORT CSV '*' HEADER CHARSET 'utf-8' FROM f TO field1 = C, field2, field3 = F, field4 = A;
    INPUT f = FILE DO  
        IMPORT XML ATTR FROM f TO field1, field2;
    INPUT f = FILE DO  
        IMPORT XML ROOT 'element' ATTR FROM f TO field1, field2;      
    INPUT f = FILE DO  
        IMPORT XML ATTR FROM f TO() headField1, headField2;        
 
    INPUT f = FILE DO  
        INPUT memo = FILE DO  
            IMPORT DBF MEMO memo FROM f TO field1 = 'DBFField1', field2 = 'DBFField2';
}
//#import end

//#importForm

date = DATA DATE (INTEGER);
sku = DATA BPSTRING[50] (INTEGER); 
price = DATA NUMERIC[14,2] (INTEGER); 
order = DATA INTEGER (INTEGER); 
FORM import
    OBJECTS o = INTEGER // orders
    OBJECTS od = INTEGER // order lines
    PROPERTIES (o) dateOrder = date // importing the date from the dateOrder field
    PROPERTIES (od) sku = sku, price = price // importing product quantity from sku and price fields
    FILTERS order(od) = o // writing the top order to order 
    
;

importForm()  { 
    INPUT f = FILE DO {
        IMPORT import JSON FROM f;
        SHOW import; // showing what was imported

        // creating objects in the database        
        FOR DATE date = date(INTEGER io) NEW o = Order DO {
            date(o) <- date;
            FOR order(INTEGER iod) = io NEW od = OrderDetail DO {
                price(od) <- price(iod); 
                sku(od) <- GROUP MAX Sku sku IF name(sku) = sku(iod); // finding sku with this name
            }        
        }             
    }
}
//#importForm end

//#input
changeCustomer (Order o)  { 
    INPUT s = STRING[100] DO {
        customer(o) <- s;
        IF s THEN
            MESSAGE 'Customer changed to ' + s;
        ELSE
            MESSAGE 'Customer dropped';
    }
}

FORM order
    OBJECTS o = Order
    PROPERTIES(o) customer ON CHANGE changeCustomer(o) 
;

testFile  { 
    INPUT f = FILE DO { // requesting a dialog to select a file
        open(f); // opening the selected file
    }
}
//#input end

FORM customers
    OBJECTS c = STRING[100]
    FILTERS [GROUP SUM 1 BY customer(Order o)](c)
;

//#request

requestCustomer (Order o)  { 
    LOCAL resultValue = STRING[100] ();
    REQUEST {
        ASK 'Choose from list?' DO
            DIALOG customers OBJECTS c = resultValue() CHANGE;
        ELSE
            INPUT = resultValue() CHANGE; 
    } DO
        customer(o) <- resultValue();
}

FORM request
    OBJECTS o = Order
    PROPERTIES(o) customer ON CHANGE requestCustomer(o) // for example, group adjustment will be performed  
;

//#request end

//#message
message  { MESSAGE 'Hello World!'; }                                // plain text message

isGood = DATA BOOLEAN (Item);
stringData(Item i)   { 
    MESSAGE IF isGood(i) THEN 'Good' ELSE 'Bad';   // depending on which item will be passed to the action, a window will be shown either with the text 'Good' or with the text 'Bad'
}
  
testMessage()  {                    // In this case, five text messages will be shown to the user
    LOCAL i = INTEGER();
    i() <- 0;
    WHILE i() < 5 DO {
        i() <- i() + 1;
        MESSAGE i();
    }
}
 
testMessageNowait()  {              // In the case of NOWAIT, one text message combining messages from five MESSAGE calls will be shown to the user
    LOCAL i = INTEGER();
    i() <- 0;
    WHILE i() < 5 DO {
        i() <- i() + 1;
        MESSAGE i() NOWAIT;
    }
}
//#message end

//#multi
CLASS Shape;

CLASS Square : Shape;
CLASS Circle : Shape;

message (Square s)  { MESSAGE 'Square'; }
message (Circle c)  { MESSAGE 'Circle'; }

message (Shape s) = MULTI message[Square](s), message[Circle](s);
//#multi end

//#new

newSku ()  { 
    LOCAL addedSkus = Sku (INTEGER);
    NEW Sku WHERE iterate(i, 1, 3) TO addedSkus(i);
    FOR Sku s = addedSkus(i) DO {
        id(s) <- 425;
        name(s) <- 'New Sku';
    }
}

//#new end

//#nestedsession
testNestedSession ()  { 
    NESTEDSESSION {
        name(Sku s) <- 'aaa';
        APPLY; // in fact, the changes will not be applied to the database, but to the "upper" session
    }
    
    MESSAGE (GROUP SUM 1 IF name(Sku s) == 'aaa'); // returns all rows
    CANCEL;
    MESSAGE (GROUP SUM 1 IF name(Sku s) == 'aaa'); // returns NULL if there was no Sku named aaa in the database before
    
}

FORM sku
    OBJECTS s = Sku PANEL
    PROPERTIES(s) id, name
;
newNestedSession()  { 
    NESTEDSESSION {
        NEW s = Sku {
            // shows the form, but any changes in it will not be applied to the database, but will be saved in the "upper session" session
            SHOW sku OBJECTS s = s;
        }       
    }
}
//#nestedsession end

//#newexecutor
testExecutor  { 
    NEWEXECUTOR {
        FOR id(Sku s) DO {
            NEWTHREAD {
                NEWSESSION {
                    name(s) <- STRING[20](id(s)); // writing the code into the name in 10 threads
                    APPLY;
                }
            }
        }
    } THREADS 10;
}
//#newexecutor end

//#newsession
testNewSession ()  { 
    NEWSESSION {
        NEW c = Currency {
            name(c) <- 'USD';
            code(c) <- 866;
        }
        APPLY;
    }
    // here a new object of class Currency is already in the database
    
    LOCAL local = BPSTRING[10] (Currency);
    local(Currency c) <- 'Local';
    NEWSESSION {
        MESSAGE (GROUP SUM 1 IF local(Currency c) == 'Local'); // will return NULL
    }
    NEWSESSION NESTED (local) {
        MESSAGE (GROUP SUM 1 IF local(Currency c) == 'Local'); // will return the number of objects of class Currency
    }
    
    NEWSESSION {
        NEW s = Sku {
            id(s) <- 1234;
            name(s) <- 'New Sku';
            SHOW sku OBJECTS s = s;
        }
    }
    
}
//#newsession end

//#newthread
testNewThread ()  { 
    //Showing messages 'Message' to all
    FOR user(Connection conn) AND connectionStatus(conn) == ConnectionStatus.connectedConnection AND conn != currentConnection() DO {
        NEWTHREAD MESSAGE 'Message'; CONNECTION conn;
    }
      
    //Execution of the 'action' action with a frequency of 10 seconds and a delay of 5 seconds
    NEWTHREAD MESSAGE 'Hello World'; SCHEDULE PERIOD 10000 DELAY 5000;
}
//#newthread end

//#print
FORM printOrder
    OBJECTS o = Order
    PROPERTIES(o) currency, customer
    
    OBJECTS d = OrderDetail
    PROPERTIES(d) idSku, price
    FILTERS order(d) == o
;

print (Order o)  { 
    PRINT printOrder OBJECTS o = o; // printing
    
    LOCAL file = FILE (); 
    PRINT printOrder OBJECTS o = o DOCX TO file;
    open(file()); 
    
    //v 2.0-2.1 syntax
    LOCAL sheetName = STRING[255]();
    sheetName() <- 'encrypted';
    PRINT printOrder OBJECTS o = o XLS SHEET sheetName PASSWORD 'pass';
    
    //v 2.2 syntax
    //PRINT printOrder OBJECTS o = o XLS SHEET 'encrypted' PASSWORD 'pass';
}
//#print end

//#read
readFiles()  { 
  
    LOCAL importFile = FILE ();
 
    //reading from FTP
    READ 'ftp://ftp.lsfusion.org/file.xlsx' TO importFile;
    //reading from SFTP
    READ 'sftp://sftp.lsfusion.org/file.xlsx' TO importFile;
    //reading from FILE
    READ 'D://lsfusion/file.xlsx' TO importFile;
    READ 'file://D://lsfusion/file.xlsx' TO importFile;
}

connectionString = DATA STRING[100]();  
importXls 'Import markups'()  { 
    LOCAL importFile = FILE ();
    READ connectionString() + '@SELECT field1, field2 FROM myTable' TO importFile;
    
    LOCAL field1 = INTEGER (INTEGER);
    LOCAL field2 = BPSTRING[10] (INTEGER);
    IMPORT TABLE FROM importFile() TO field1, field2;
}
//#read end

//#return
importFile  { 
    LOCAL file = FILE ();
    INPUT f = FILE DO {
        file () <- f;
    }
    
    IF NOT file() THEN RETURN;
}
//#return end

//#seek
number = DATA INTEGER (Order);
FORM orders
    OBJECTS o = Order
    PROPERTIES(o) READONLY number, currency, customer
;
newOrder  { 
    NEW new = Order {
        number(new) <- (GROUP MAX number(Order o)) (+) 1;
        SEEK orders.o = new;
    }
}
seekFirst  { SEEK FIRST orders.o; }
seekLast  { SEEK LAST orders.o; }

EXTEND FORM orders
    PROPERTIES(o) newOrder, seekFirst, seekLast
;
//#seek end

//#show
date = DATA DATE (Order);
FORM showForm
    OBJECTS dateFrom = DATE, dateTo = DATE PANEL
    PROPERTIES VALUE(dateFrom), VALUE(dateTo)
    
    OBJECTS o = Order
    FILTERS date(o) >= dateFrom, date(o) <= dateTo
;

testShow ()  { 
    SHOW showForm OBJECTS dateFrom = 2010_01_01, dateTo = 2010_12_31;
    
    NEWSESSION {
        NEW s = Sku {
            SHOW sku OBJECTS s = s FLOAT;
        }
    }
}
//#show end

//#try
tryToImport(FILE f)  { 
    TRY {
        LOCAL a = BPSTRING[10] (INTEGER);
         
        IMPORT XLS FROM f TO a = A;
    }
}

CLASS MyLock {
    lock 'Blocking'
}

singleDo ()  { 
    NEWSESSION {
        lock(MyLock.lock);
        IF lockResult() THEN 
        TRY {
            MESSAGE 'Lock Obtained';
        } CATCH {
            MESSAGE messageCaughtException();
        } FINALLY unlock(MyLock.lock);
    }
}
//#try end

//#while
iterateDates (DATE dateFrom, DATE dateTo)  { 
    LOCAL dateCur = DATE();              
       
    dateCur() <- dateFrom;
    WHILE dateCur() <= dateTo DO {     
        MESSAGE 'I have a date ' + dateCur();
        dateCur() <- sum(dateCur(), 1);
    }
}
//#while end

//#write
loadAndWrite ()  { 
    INPUT f = FILE DO {
        WRITE f TO 'file:///home/user/loadedfile.csv' APPEND;
        WRITE CLIENT f TO '/home/user/loadedfile.txt';
        WRITE CLIENT DIALOG f TO 'loadedfile';
    }
}
//#write end