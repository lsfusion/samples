MODULE FormSample;

//#form
CLASS Document;

// declaring the Documents form
FORM documents 'Documents'
    OBJECTS d = Document // Adding one object of the Document class. The object will be available by this name in the DESIGN, SHOW, EXPORT, DIALOG, etc. operators.

    
    // ... adding properties and filters to the form 

    LIST Document OBJECT d // marking that this form should be used when it is necessary to select a document, while the d object should be used as a return value
;
 
CLASS Item;

// declaring the Product form
FORM item 'Product'
    OBJECTS i = Item PANEL // adding an object of the Item class and marking that it should be displayed in the panel (i.e., only one value is visible)

    // ... adding properties and filters to the form 

    EDIT Item OBJECT i // marking that this form should be used when it is necessary to add or edit a product
;

// declaring a form with a list of Products
FORM items 'Products'
    OBJECTS i = Item

    // ... adding properties and filters to the form 

    PROPERTIES(i) NEWSESSION NEW, EDIT // adding buttons that will create and edit the product using the item form
;

CLASS Invoice;
CLASS InvoiceDetail;

// declaring the invoice print form
FORM printInvoice
    OBJECTS i = Invoice // adding an object of the invoice class for which printing will be executed

    // ... adding properties and filters to the form 
;
  
// splitting the form definition into two instructions (the second instruction can be transferred to another module)
EXTEND FORM printInvoice
    OBJECTS d = InvoiceDetail // adding invoice lines, each of which will be used in the report as a detail

    // ... adding properties and filters to the form 
;
print (Invoice invoice)  { PRINT printInvoice OBJECTS i = invoice; } // declaring an action that will open the invoice print form
//#form end

//#objects
CLASS Shipment;
// declaring the delivery form
FORM shipments 'Deliveries'
    OBJECTS s = Shipment // adding one object of the shipment class
                        PAGESIZE 100 // indicating that the table should always contain 100 rows

    // ... adding properties and filters to the form 
;
  
// Declaring a form that will display the turnover of the product for a specified interval
name = DATA STRING[100] (Item);
revenue = DATA NUMERIC[16,2] (Item, DATE, DATE);

FORM revenues 'Product turnovers'
    OBJECTS interval = (dateFrom 'Date (from)' = DATE, dateTo 'Date (to)' = DATE) PANEL, // declaring a group of objects, consisting of 2 objects of the Date class with the appropriate captions, which will always be displayed as a panel
            i = Item // adding a list of products
    PROPERTIES VALUE(dateFrom), VALUE(dateTo) // adding to the form the properties of the date objects values, with which the user can select dates
    PROPERTIES name(i), revenue(i, dateFrom, dateTo) // adding the product name and the property with the product turnover for the date interval
;
//#objects end

//#tree
CLASS SkuGroup;
name = DATA ISTRING[100] (SkuGroup);
active = DATA BOOLEAN (SkuGroup);
parent = DATA SkuGroup (SkuGroup) AUTOSET;

CLASS Sku;
name = DATA ISTRING[100] (Sku);
skuGroup = DATA SkuGroup (Sku);

  
FORM skus 'Sku'
    TREE groupTree g=SkuGroup PARENT parent(g)
    PROPERTIES READONLY name(g)
    FILTERS active(g)
    
    OBJECTS s = Sku
    PROPERTIES(s) name
    FILTERS skuGroup(s) == g
;
 
CLASS Group1;
name = DATA STRING[100] (Group1);

CLASS Group2;
name = DATA STRING[100] (Group2);

CLASS Group3;
name = DATA STRING[100] (Group3);

in = DATA BOOLEAN (Group1, Group2);
in = DATA BOOLEAN (Group2, Group3);
  
FORM groups
    TREE groups g1 = Group1, g2 = Group2, g3 = Group3
    PROPERTIES READONLY name(g1), name(g2), name(g3)
    FILTERS in(g1, g2), in(g2, g3)
;
//#tree end

//#properties
CLASS Order;
date = DATA DATE (Order);
time = DATA TIME (Order);
number = DATA INTEGER (Order);
series = DATA BPSTRING[2] (Order);

note = DATA ISTRING[255] (Order);

CLASS OrderDetail;
order = DATA Order (OrderDetail) NONULL DELETE;
date(OrderDetail d) = date(order(d));

index (OrderDetail d) = PARTITION SUM 1 ORDER d BY order(d) CHARWIDTH 4;

sku = DATA Sku (OrderDetail);
nameSku (OrderDetail d) = name(sku(d));

quantity = DATA NUMERIC[10,2] (OrderDetail);
price = DATA NUMERIC[10,2] (OrderDetail);
sum = DATA NUMERIC[12,2] (OrderDetail);

sum (Order o) = GROUP SUM sum(OrderDetail d) BY order(d);

quantity (Order o, Sku s) = GROUP SUM quantity(OrderDetail d) BY order(d), sku(d);
lastDetail (Order o, Sku s) = GROUP MAX OrderDetail d BY order(d), sku(d); 
changeQuantity (Order o, Sku s)  { 
    INPUT n = NUMERIC[10,2] DO {
        IF lastDetail(o, s) THEN {
            IF n THEN
                quantity(OrderDetail d) <- n WHERE d == lastDetail(o, s);
            ELSE
                DELETE OrderDetail d  WHERE d == lastDetail(o, s);
        } ELSE IF n THEN {
            NEW d = OrderDetail {
                order(d) <- o;
                sku(d) <- s;
                quantity(d) <- n;
            }
        }
    }
}

stopOrder = DATA BOOLEAN (Sku);
onStock = DATA NUMERIC[10,2] (Sku);
ordered = DATA NUMERIC[10,2] (Sku);

CLASS Customer;
name = DATA ISTRING[100] (Customer);
FORM customers
    OBJECTS c = Customer
    PROPERTIES(c) READONLY name
    LIST Customer OBJECT c
;

customer = DATA Customer (Order);
nameCustomer (Order o) = name(customer(o));

customer(OrderDetail d) = customer(order(d));

CLASS Region;
name = DATA STRING[100] (Region); 

region = DATA Region (Customer);

// declaring the orders form
FORM order 'Order'
    OBJECTS o = Order PANEL // adding an order object to the form
    PROPERTIES VALUE(o), // adding the order ID in the database
               date(o), time(o), series(o), number(o), // adding properties date/time of order, series/order number
               nameCustomer(o), // adding the name of the customer, which by default will be available for editing
                                     // here, when the user tries to edit it, a dialog will be called for the customer choice - a form for which the LIST customer parameter is set
               note(o), // adding a note
               sum(o) READONLY // adding the order amount without the possibility of editing, since it is automatically calculated based on the sum of rows                                     
                         
    OBJECTS d = OrderDetail // adding the order line object
    PROPERTIES(d) // all properties in this block will have an order line input
                  index READONLY, // adding the ordinal line number and making it impossible to edit
                  nameSku, // adding a name
                  quantity, price, sum, // adding quantity, price, amount
                  NEW, // adding the predefined NEW action that adds a new order line
                  DELETE // adding an action that will delete the order line
    FILTERS order(d) == o // indicating that only lines related to this order should be shown
  
    OBJECTS s = Sku // adding a sku object to which the totals for each sku in the order will be written
    PROPERTIES(s) name READONLY // adding a name, while making a note that it cannot be edited on this form
     
    PROPERTIES quantity(o, s) // adding a property that will display the ordered quantity by sku in this order
               ON CHANGE changeQuantity(o, s) // by default, even though the property is not marked READONLY and nothing will happen when the user tries to change it, since quantity is an aggregated property
                                                           // in this case, a note is made that when the user tries to change, the changeQuantity action will be called
                                                           // an algorithm is written in this property that will create/delete order lines or change the quantity in them
               READONLYIF stopOrder(s) // making the property unavailable for editing, if the order is prohibited for this sku
               BACKGROUND stopOrder(s) // in addition, in this case, this cell is highlighted with custom background so that the user can see such positions in advance
  
    EDIT Order OBJECT o // marking the form as a form for editing orders
;
  
EXTEND FORM order // expanding the form with the Mixin concept
    PROPERTIES onStock(s) BEFORE quantity(d), // adding the property of the current balance to the form before the quantity in the order
               ordered(s) BEFORE quantity(d) // adding to the form the quantity of already ordered products within all orders
;
  
FORM orders 'Orders'
    OBJECTS o = Order
    PROPERTIES(o) READONLY VALUE, date, number // all properties in this block are unavailable for editing
    PROPERTIES(o) NEWSESSION NEW, EDIT, DELETE // adding predefined NEW and EDIT actions that will call the order form to add orders
;
  
// creating a "report" in which orders for a certain interval will be visible in the context of customers in a particular region
FORM orderReport 'Sales by warehouse'
    OBJECTS interval = (dateFrom 'Date (from)' = DATE, dateTo 'Date (to)' = DATE) PANEL // declaring a group of objects, consisting of 2 objects of the Date class with the appropriate captions, which will always be displayed as a panel
    PROPERTIES dateFrom = VALUE(dateFrom), dateTo = VALUE(dateTo) // adding to the form the properties of the date objects values, with which the user can select dates
                                                                        // in addition, assigning to these properties on the form names dateFrom and dateTo, respectively
     
    OBJECTS r = Region PANEL // adding a region object, by which customers will be filtered
    PROPERTIES(r) name SELECTOR // adding the property region name, at the same time marking that when editing it, the dialog for choosing a region should be called, the selected value of which will be used as the current value
  
    OBJECTS c = Customer // adding the customers object
                         // specifically not adding a single property so that it is "invisible", but it is needed in order to display customers in columns
    FILTERS region(c) == r // setting a filter so that customers are only from this region
  
    OBJECTS s = Sku // adding a sku object, in the table of which basic information will be displayed
    PROPERTIES(s) name READONLY // adding the sku name and making it READONLY, otherwise the user will be able to change the product names directly in the report
     
    PROPERTIES = [ GROUP SUM quantity(OrderDetail d) IF date(d) >= dateFrom AND date(d) <= dateTo BY sku(d), customer(d)](s, c) 
                // adding a property in which the quantity of ordered sku by customers for a certain date interval is calculated
               COLUMNS (c) // marking that customers should be displayed in columns, with the same number of columns as there will be rows in the customer object, taking into account filters, and they will be displayed in the same order
               HEADER name(c) // setting that the name of the customer will be used as the column heading
;
//#properties end

//#filters
CLASS Stock;
name = DATA ISTRING[100] (Stock);
region = DATA Region (Stock);

CLASS Group;
name = DATA ISTRING[100] (Group);

group = DATA Group(Sku);
nameGroup (Sku s) = name(group(s));

active = DATA BOOLEAN (Sku); 

onStock = DATA NUMERIC[10,2] (Stock, Sku);

FORM onStock 'Balances' // creating a form in which the balances of products can be viewed
    OBJECTS r = Region PANEL // adding a region object
    PROPERTIES name(r) SELECTOR // adding the property name of the region, when clicking on which the user can select it
  
    OBJECTS st = Stock // adding the warehouse object
    PROPERTIES name(st) READONLY // adding the warehouse name
    FILTERS region(st) == r // adding a filter so that only warehouses of the selected region are shown
  
    OBJECTS s = Sku // adding products
    PROPERTIES READONLY groupName = nameGroup(s), name(s), onStock(st, s) // adding the name of the group of products, assigning it groupName as the name of the property on the form, as well as the name and balance of the product
    FILTERS active(s) // turning it on to show only active products
;
//#filters end

//#regularfilters
active = DATA BOOLEAN (Stock);

EXTEND FORM onStock // extending the previously created form with balances
    FILTERGROUP stockActive // creating a group of filters with one filter, which will be shown as a checkbox by which the user can enable/disable the filter
        FILTER 'Active' active(st) 'F11' // adding filter for active warehouses only, which will be applied by pressing F11
    FILTERGROUP skuAvailability // creating a new filter group in which the user can select one of the filters using the drop-down list
        FILTER 'Is on stock' onStock (st, s) 'F10' DEFAULT // adding a filter that will display only products on stock, which will be selected by pressing F10 and will be automatically selected when the form is opened
;

// ...  
  
EXTEND FORM onStock
    EXTEND FILTERGROUP skuAvailability
        FILTER 'Negative balances' onStock (st, s) < 0 'F9' // adding filter by expression
;
//#regularfilters end

//#sort
EXTEND FORM onStock // extending the previously created form with balances
    ORDERS name(s) // enabling ordering by warehouse name in the warehouse list
    ORDERS groupName, onStock(st, s) DESC // enabling ordering in ascending order of the group name, and inside in descending order of the balance in the warehouse
                                            // it should be noted that the property is the property name on the form groupName, not just the property name nameGroupSku
;
//#sort end

//#events
showImpossibleMessage()  { MESSAGE 'It\'s impossible'; };

posted = DATA BOOLEAN (Invoice);

FORM invoice 'Invoice' // creating a form for editing an invoice
    OBJECTS i = Invoice PANEL // creating an object of the invoice class

//    ...  setting the rest of the form behavior
  
    EVENTS
        ON OK { posted(i) <- TRUE; }, // specifying that when the user clicks OK, an action should be executed that will execute actions to "conduction" this invoice
        ON DROP showImpossibleMessage() // by clicking the formDrop button, showing a message that this cannot be, since this button by default will be shown only in the form for choosing an invoice, and this form is basically an invoice edit form
;

CLASS Shift;
currentShift = DATA Shift();

CLASS Cashier;
currentCashier = DATA Cashier();

CLASS Receipt;
shift = DATA Shift (Receipt);
cashier = DATA Cashier (Receipt);

FORM POS 'POS' // declaring the form for product sale to the customer in the salesroom
    
    OBJECTS r = Receipt PANEL // adding an object that will store the current receipt
//    ... declaring the behavior of the form
  
;

createReceipt ()  { 
    NEW r = Receipt {
        shift(r) <- currentShift();
        cashier(r) <- currentCashier();
        
        SEEK POS.r = r;
    }
}

EXTEND FORM POS // adding a property through the form extension so that SEEK could be applied to the already created object on the form
    EVENTS
        ON INIT createReceipt() // when opening the form, executing the action to create a new receipt, which fills in the shift, cashier and other information
;
//#events end

//#view
// creating a form for printing a price tag for a product
labelFile = DATA STRING[100] (Item);
printLabelFile (Item i)= OVERRIDE labelFile(i), 'MyModule_printLabel_i.jrxml' IF i IS Item;
FORM printLabel 'Price tag printing'
    OBJECTS i = Item               // adding the product for which the price tag will be printed
    REPORT printLabelFile(i)       // marking that a file whose name is stored in the printLabelFile property should be used as a template (it is assumed that the i value will be passed in the OBJECTS block)
                                   // for example, the user can input myLabel1.jrxml there, then the system will use a file named myLabel1.jrxml
//  ... other properties required for printing
;
//#view end

//#design
DESIGN order { // customizing the design of the form, starting with the default design
    // marking that all changes to the hierarchy will occur for the topmost container 
    NEW orderPane FIRST { // creating a new container as the very first one before the system buttons, in which we put two containers - header and specifications
        fill = 1; // specifying that the container should occupy all the space available to it
        type = SPLITV; // specifying that the container will be a vertical splitter
        MOVE BOX(o) { // moving everything related to the object o to the new container
            PANEL(o) { // configuring how properties are displayed in the object o panel
                horizontal = FALSE; // making all descendants go from top to bottom
                NEW headerRow1 { // creating a container - the first row
                    horizontal = TRUE;
                    MOVE PROPERTY(date(o)) { // moving the order date property
                        caption = 'Date of the edited order'; // "override" the property caption in the form design (instead of the standard one)
                        toolTip = 'Input here the date the order was made'; //setting a hint for the order date property
                        background = #00FFFF; // making the background red
                    }
                    MOVE PROPERTY(time(o)) { // moving the order time property
                        foreground = #FF00FF; // making the color green
                    }
                    MOVE PROPERTY(number(o)) { // moving the order number property
                        charWidth = 5; // setting that the user should preferably be shown 5 characters
                    }
                    MOVE PROPERTY(series(o)); // moving the order series property
                }
                NEW headerRow2 {
                    horizontal = FALSE; // descendants - from top to bottom
                }
                MOVE PROPERTY(note(o));
            }
              
            size = (400, 300); //specifying that the container o.box should have a base size of 400x300 pixels
        }
        NEW detailPane { // creating a container that will store various specifications for the order
            tabbed = TRUE; // marking that this container should be a tab panel, where its descendats are tabs
            MOVE BOX(d) { // adding a container with order lines as one of the tabs in the top panel
                caption = 'Lines'; // setting the caption of the tab panel
                PROPERTY(index(d)) { focusable = FALSE; } // making the row number column never have focus
                GRID(d) {
                    defaultComponent = TRUE; // making sure that by default the focus when opening the form is set to the row table
                }
            }
            MOVE BOX(s) { // adding a container with sku totals as one of the detailPane tabs
                caption = 'Selection';
            }
        }
    }
}
  
// splitting the form definition into two instructions (the second instruction can be transferred to another module)
DESIGN order {
    REMOVE TOOLBARLEFT; // removing from the hierarchy the container with the print and export buttons to xls, thereby making them invisible
}
//#design end

//#extendform
CLASS ItemGroup;
name = DATA ISTRING[100] (ItemGroup);

itemGroup = DATA ItemGroup (Item);

EXTEND FORM items
    PROPERTIES(i) NEWSESSION DELETE // adding a delete button to the form
    
    OBJECTS g = ItemGroup BEFORE i // adding a product group object to the form before the product
    PROPERTIES(g) READONLY name
    FILTERS itemGroup(i) == g // if the object was added after the object with products, then filtering would go by the group of products, and not by products
;
//#extendform end