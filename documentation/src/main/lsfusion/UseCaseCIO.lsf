MODULE UseCaseCIO;

CLASS Color 'Color' {
    white 'White',
    black 'Black'
}
  
CLASS Book 'Book';
  
color 'Color' = DATA Color (Book);

// Option 1
nameColor1 'Color' (Book b) = staticCaption(color(b));
  
// Option 2
nameColor2 'Color' (Book b) = IF color(b) == Color.white THEN 'White' ELSE 'Black';

CLASS Order 'Order';
  
sent 'Sent' = DATA BOOLEAN (Order);
agreed 'Agreed' = DATA BOOLEAN (Order);
accepted 'Accepted' = DATA BOOLEAN (Order);

// Option 1
nameStatus1 'Status' (Order o) = CASE WHEN accepted(o) THEN 'Accepted'
                                     WHEN agreed(o) THEN 'Agreed'
                                     WHEN sent(o) THEN 'Sent'
                                ELSE 'New';
  
// Option 2
CLASS Status 'Status' {
    new 'New',
    sent 'Sent',
    agreed 'Agreed',
    accepted 'Accepted'
}
  
status 'Status' (Order o) = CASE WHEN accepted(o) THEN Status.accepted
                                 WHEN agreed(o) THEN Status.agreed
                                 WHEN sent(o) THEN Status.sent
                            ELSE Status.new;
nameStatus2 'Status' (Order o) = staticCaption(status(o));

dataMarkup 'Markup, %' = DATA NUMERIC[6,2] (Book);
 
defaultMarkup 'Default markup' = DATA NUMERIC[6,2] ();
 
markup1 'Markup, %' (Book b) = OVERRIDE dataMarkup(b), defaultMarkup();
 
// Equivalent to:
markup2 'Markup, %' (Book b) = IF dataMarkup(b) THEN dataMarkup(b) ELSE defaultMarkup();

CLASS Category 'Category';

category 'Category' = DATA Category (Book);

markup 'Markup, %' = DATA NUMERIC[6,2] (Category);
 
markup 'Markup, %' (Book b) = OVERRIDE dataMarkup(b), markup(category(b));

number 'Number' = DATA INTEGER (Book);

freeNumber1 () = (GROUP MAX number(Book b)) (+) 1;
  
// Equivalent to:
freeNumber2() = (OVERRIDE 0, (GROUP MAX number(Book b))) + 1;
