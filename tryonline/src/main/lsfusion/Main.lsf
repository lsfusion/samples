MODULE Main;

REQUIRE SystemEvents, Service, Utils, SchedulerDefaultData;

CLASS Server 'Server';
processId = DATA LONG (Server);
text 'Response text' = DATA TEXT (Server, LONG);

baseDir 'Launch directory' = DATA BPSTRING[50] ();
examplesDBDir 'Sample directory (DBMS)' = DATA BPSTRING[50] ();
examplesPlatformDir 'Sample directory (Platform)' = DATA BPSTRING[50] ();
dbPassword 'Database password' = DATA BPSTRING[50] () CHARWIDTH 10 NOFLEX; // for postgres user
serverStartCmd 'Server start command' = DATA STRING[1000] (); // will be started from some basedir subfolder 
serverEncoding 'Console encoding' = DATA BPSTRING[10] (); // server console output encoding
minPort 'Min. port' = DATA LONG (); 
maxPort 'Max. port' = DATA LONG (); 

EXTEND FORM options
    PROPERTIES() baseDir, examplesDBDir, examplesPlatformDir, dbPassword, serverEncoding, serverStartCmd, minPort, maxPort
;

onStarted() + { // default for linux
    IF NOT baseDir() THEN
        baseDir() <- './box';
    IF NOT serverStartCmd() THEN
        serverStartCmd() <- 'java -Dlsfusion.server.lightstart=true -Dlsfusion.server.devmode=true -cp .:../server.jar lsfusion.server.logics.BusinessLogicsBootstrap'; // windows : -> ; no double quotes in linux
    IF NOT serverEncoding() THEN
        serverEncoding() <- 'UTF-8'; // for windows may be single-byte (for example cp1251)
    IF NOT dbPassword() THEN
        dbPassword() <- '11111';    
    IF NOT minPort() THEN
        minPort() <- 10000;
    IF NOT maxPort() THEN
        maxPort() <- 50000; 
}

server = DATA Server (LONG);
port = DATA LOCAL NESTED LONG ();
registerPort(Server server) {
    APPLY {
        port() <- mod(LONG(server), maxPort() - minPort()) + minPort();
        WHILE server(port()) DO
            port() <- port() + 1;            
        server(LONG p) <- server WHERE p = port(); 
    }        
}

port = GROUP NAGGR LONG p BY server(p); 
unregisterPort(Server server) {
    server(LONG p) <- NULL WHERE p = port(server);
    APPLY;
}


processId = DATA LOCAL LONG ();
runProcess INTERNAL 'RunProcessActionProperty' (Server, TEXT, TEXT, TEXT);
killProcess INTERNAL 'KillProcessActionProperty' (Server);

serverDir(Server server) = baseDir() + '/' + LONG(server);
dbName(Server server) = 'db' + LONG(server);

createServer 'Create server' (Server server) {
    registerPort(server);

    LOCAL confDir = TEXT ();
    confDir() <- serverDir(server) + '/conf';
    mkdir(confDir());

    copy(baseDir() + '/log4j.xml', 'file://' + serverDir(server) + '/log4j.xml');

    WRITE RAWFILE('db.server=localhost'+'\n'+
                  'db.name='+dbName(server)+'\n'+
                  'db.user=postgres'+'\n'+
                  'db.password='+dbPassword()+'\n'+                                                              
                  'logics.topModule=Main\n'+
                  'rmi.port='+port()) TO 'file://' + confDir() + '/settings.properties';
                                                              

}

deleteServer 'Delete server' (Server server) {
    EXTERNAL SQL 'jdbc:postgresql://localhost/tryonline?user=postgres&password='+dbPassword() EXEC 'DROP DATABASE ' + dbName(server) + ';';
    
    LOCAL confDir = TEXT ();
    confDir() <- serverDir(server);
    delete(serverDir(server));

    unregisterPort(server);
}

code = DATA TEXT (Server);
dateStart = DATA DATETIME (Server);

runServer 'Start server' (Server server, TEXT code) {
    NEWSESSION NEWSQL NEWTHREAD {
        WRITE RAWFILE(TEXTFILE('MODULE Main; ' + code)) TO 'file://' + serverDir(server) + '/Main.lsf';
        APPLY { code(server) <- code; dateStart(server) <- currentDateTime(); }
        runProcess(server, serverStartCmd(), serverDir(server), serverEncoding());
    }
}

killServer 'Stop server' (Server server) {
    killProcess(server);
    
    sleep(1000); // will wait a little bit to give process time to write all its text

    text(server, LONG answer) <- NULL;
    dateStart(server) <- NULL;
    APPLY;
}

startServer(JSONFILE file) {
    IMPORT JSON FROM file FIELDS () TEXT code DO {
        NEW server = Server {
            APPLY;
            createServer(server);
            runServer(server, code);
            EXPORT JSON FROM server=server, port=port(server);
        }           
    }
} @@noauth;

restartServer(JSONFILE file) {
    IMPORT JSON FROM file FIELDS () LONG server, TEXT code DO {
        FOR LONG(Server serverObject AS Server) = server DO {
            killServer(serverObject);
           
            runServer(serverObject, code);
        }           
    }
} @@noauth;

stopServer(JSONFILE file) {
    IMPORT JSON FROM file FIELDS () LONG server DO {
        FOR LONG(Server serverObject AS Server) = server DO {
            killServer(serverObject);
            
            deleteServer(serverObject);
        }    
    }
} @@noauth;

stopUnusedServers() {
    FOR dateStart(Server server) <= subtractSeconds(currentDateTime(), 60*30) DO {
        killServer(server);
        
        deleteServer(server);
    } 
}

loadDefaultScheduledTasks () + {     
    loadDefaultScheduledTask ('Stopping unused servers', 2014_07_01_01:00, 60, SchedulerStartType.afterStart);
    loadDefaultScheduledTaskDetail ('Stopping unused servers', 1, 'Main.stopUnusedServers[]');
}

getServerLog(JSONFILE file) {
    IMPORT JSON FROM file FIELDS () LONG server, LONG lastAnswer DO {
        FOR LONG(Server serverObject AS Server) = server DO {
            LOCAL newAnswers = TEXT (LONG);
            newAnswers(LONG answer) <- text(serverObject, answer) WHERE answer > lastAnswer;
            EXPORT JSON FROM answer=(GROUP MAX LONG answer IF newAnswers(answer)),
                        text=(GROUP CONCAT newAnswers(LONG answer),'' ORDER answer);                          
        }
    }
} @@noauth;

FORM servers 'Servers'
    OBJECTS s=Server
    PROPERTIES (s) VALUE, code, dateStart, port ON CHANGE { FOR LONG oldp = port(s) DO INPUT newp=port(s) DO { server(oldp) <- NULL; server(newp) <- s; } ; }, NEW, EDIT, DELETE 
    PROPERTIES (s) GRID createServer, killServer, deleteServer 
    
    OBJECTS a 'Responses' = LONG
    PROPERTIES VALUE(a), text(s, a)
    FILTERS text(s, a)
;

NAVIGATOR {
    NEW servers;
} 

CLASS Locale {
    ru 'RU',
    en 'EN'
}

CLASS Example;
caption 'Caption' = DATA STRING (Example, Locale);
path 'Path' = DATA STRING (Example);
mode 'Mode' = DATA INTEGER (Example);
order 'Order' = DATA INTEGER (Example);
exPath 'Path' = DATA STRING (Example, LONG); 

FORM examples 'Examples'
    OBJECTS e = Example
    PROPERTIES (e) path, mode, order, NEW, DELETE
    ORDERS mode(e), order(e)
    OBJECTS l 'Captions' = Locale 
    PROPERTIES 'Locale' = STRING[2](staticCaption(l)), caption(e, l)
    OBJECTS i = INTEGER
    FILTERS iterate(i, 1, 10)
    PROPERTIES exPath(e, i); 
;

NAVIGATOR {
    NEW examples;
} 

readedText = DATA LOCAL TEXT ();

removeTextBeforeBlockEnd(STRING block) {
    LOCAL pos = INTEGER ();
    FOR run = 'DFKRJKJSIEIJKDFJI' DO {
        readedText() <- regexpReplace(readedText(), '//#'+block+' end.*\\n', run, 'n'); // we need \\n to match \n itself
        pos() <- strpos(readedText(), run);
        IF pos() > 0 THEN
            readedText() <- substrFrom(readedText(), pos()+length(run));                    
    }                    
}

readPathToText(STRING path) {
    READ path;
    readedText() <- TEXT(CSVFILE(readFile()));
}

getExamples(JSONFILE file) {
    IMPORT JSON FROM file FIELDS () INTEGER mode, STRING locale DO {
        LOCAL file = TEXT (Example);
        FOR mode(Example ex) = mode DO {
            readPathToText(path(ex));
            
            LOCAL text = TEXT ();
            IF mode != 0 THEN {
                removeTextBeforeBlockEnd('module');
                text() <- readedText();
                FOR p = exPath(ex, LONG l) ORDER l DO {
                    readPathToText(p);
                    removeTextBeforeBlockEnd('header');
                    text() <- CONCAT '\n', text(), readedText(); 
                }
                // removing other tags from text
                text() <- regexpReplace(text(), '//#.*(\\n)?', '', 'ng');
            } ELSE {
                removeTextBeforeBlockEnd('header');
                text() <- readedText();
            }
            file(ex) <- text();
        }
        EXPORT JSON FROM caption = caption(Example ex, nameStatic('Main_Locale.' + locale)), text = file(ex) WHERE file(ex) ORDER order(ex);                          
    }
} @@noauth;
